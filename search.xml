<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[create-react-app使用postcss-pxtorem插件实现移动端自适应布局]]></title>
    <url>%2F2019%2F08%2F28%2Fcreate-react-app%E4%BD%BF%E7%94%A8postcss-pxtorem%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[前言移动端响应式布局,rem方案。实现原理是根据设备宽度等比设置根元素html的fontSize. rem 则等于元素实际fontSize/根元素fontSize. 所以元素的实际fontSize比上设备的宽度是一个定值。则能保证在移动设备上视觉效果一致。顺便提一句：当我们使用rem布局时lineHeight文字无法居中，这时候可以用table布局实现居中 实例瓜子二手车wap端&nbsp;&nbsp;&nbsp;&nbsp;票哆哆公众号（这个是我开发的^-^） 实现1.运行script暴露配置1npm run jest 2.在模板中设置html根元素的fontSize1234567891011var htmlDc=document.getElementsByTagName(&apos;html&apos;)[0]; setRootSize=function () &#123; var clientWidth=document.documentElement.clientWidth||document.body.clientWidth; var clientHeight=document.documentElement.clientHeight||document.body.clientHeight; htmlDc.style.fontSize=clientWidth/3.75+&apos;px&apos;; htmlDc.style.minHeight=clientHeight+&apos;px&apos;; &#125;; setRootSize(); window.onresize=function () &#123; setRootSize(); &#125;; 3.在webpack.config.js中加入插件12345require(&apos;postcss-pxtorem&apos;)(&#123; rootValue : 100, selectorBlackList : [], //过滤 propList : [&apos;*&apos;], &#125;)]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>create-react-app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[antd自定义表单控件]]></title>
    <url>%2F2019%2F08%2F09%2Fantd%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E5%8D%95%E6%8E%A7%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[前言不知不觉使用antd已经接近两年了，可能其中使用的最多的就是表单了，antd自身提供了很丰富的表单组件。单在实际业务中，极大的可能满足不了业务需求，这时候就需要自己写表单控件。 实例下面是antd官网上的一个示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118import &#123; Form, Input, Select, Button &#125; from &apos;antd&apos;;const &#123; Option &#125; = Select;class PriceInput extends React.Component &#123; static getDerivedStateFromProps(nextProps) &#123; // Should be a controlled component. if (&apos;value&apos; in nextProps) &#123; return &#123; ...(nextProps.value || &#123;&#125;), &#125;; &#125; return null; &#125; constructor(props) &#123; super(props); const value = props.value || &#123;&#125;; this.state = &#123; number: value.number || 0, currency: value.currency || &apos;rmb&apos;, &#125;; &#125; handleNumberChange = e =&gt; &#123; const number = parseInt(e.target.value || 0, 10); if (Number.isNaN(number)) &#123; return; &#125; if (!(&apos;value&apos; in this.props)) &#123; this.setState(&#123; number &#125;); &#125; this.triggerChange(&#123; number &#125;); &#125;; handleCurrencyChange = currency =&gt; &#123; if (!(&apos;value&apos; in this.props)) &#123; this.setState(&#123; currency &#125;); &#125; this.triggerChange(&#123; currency &#125;); &#125;; triggerChange = changedValue =&gt; &#123; // Should provide an event to pass value to Form. const &#123; onChange &#125; = this.props; if (onChange) &#123; onChange(Object.assign(&#123;&#125;, this.state, changedValue)); &#125; &#125;; render() &#123; const &#123; size &#125; = this.props; const &#123; state &#125; = this; return ( &lt;span&gt; &lt;Input type=&quot;text&quot; size=&#123;size&#125; value=&#123;state.number&#125; onChange=&#123;this.handleNumberChange&#125; style=&#123;&#123; width: &apos;65%&apos;, marginRight: &apos;3%&apos; &#125;&#125; /&gt; &lt;Select value=&#123;state.currency&#125; size=&#123;size&#125; style=&#123;&#123; width: &apos;32%&apos; &#125;&#125; onChange=&#123;this.handleCurrencyChange&#125; &gt; &lt;Option value=&quot;rmb&quot;&gt;RMB&lt;/Option&gt; &lt;Option value=&quot;dollar&quot;&gt;Dollar&lt;/Option&gt; &lt;/Select&gt; &lt;/span&gt; ); &#125;&#125;class Demo extends React.Component &#123; handleSubmit = e =&gt; &#123; e.preventDefault(); this.props.form.validateFields((err, values) =&gt; &#123; if (!err) &#123; console.log(&apos;Received values of form: &apos;, values); &#125; &#125;); &#125;; checkPrice = (rule, value, callback) =&gt; &#123; if (value.number &gt; 0) &#123; callback(); return; &#125; callback(&apos;Price must greater than zero!&apos;); &#125;; render() &#123; const &#123; getFieldDecorator &#125; = this.props.form; return ( &lt;Form layout=&quot;inline&quot; onSubmit=&#123;this.handleSubmit&#125;&gt; &lt;Form.Item label=&quot;Price&quot;&gt; &#123;getFieldDecorator(&apos;price&apos;, &#123; initialValue: &#123; number: 0, currency: &apos;rmb&apos; &#125;, rules: [&#123; validator: this.checkPrice &#125;], &#125;)(&lt;PriceInput /&gt;)&#125; &lt;/Form.Item&gt; &lt;Form.Item&gt; &lt;Button type=&quot;primary&quot; htmlType=&quot;submit&quot;&gt; Submit &lt;/Button&gt; &lt;/Form.Item&gt; &lt;/Form&gt; ); &#125;&#125;const WrappedDemo = Form.create(&#123; name: &apos;customized_form_controls&apos; &#125;)(Demo);ReactDOM.render(&lt;WrappedDemo /&gt;, mountNode); 示例代码很多，但其关键点就几点,getFieldDecorator处理后的组件会带有两个属性，value,onChange,value用于传入默认值，onChange用于回传数据给表单。 1.传入在 getDerivedStateFromProps 中value关联到组件 123456789static getDerivedStateFromProps(nextProps) &#123; // Should be a controlled component. if (&apos;value&apos; in nextProps) &#123; return &#123; ...(nextProps.value || &#123;&#125;), &#125;; &#125; return null; &#125; 1.传出在 getDerivedStateFromProps 中value关联到组件 1234567triggerChange = changedValue =&gt; &#123; // Should provide an event to pass value to Form. const &#123; onChange &#125; = this.props; if (onChange) &#123; onChange(Object.assign(&#123;&#125;, this.state, changedValue)); &#125; &#125;;]]></content>
      <categories>
        <category>antd</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>antd</tag>
      </tags>
  </entry>
</search>
